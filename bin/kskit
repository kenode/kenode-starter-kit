#!/usr/bin/env node

var program = require('commander');
var path = require('path');
var fs = require('fs');
var readline = require('readline');
var mkdirp = require('mkdirp');
var _ = require('lodash');
var pkg = require('../package.json');

var _exit = process.exit;
var version = pkg.version;
process.exit = exit;
_.templateSettings.interpolate = /{{([\s\S]+?)}}/g;

before(program, 'outputHelp', function () {
  this.allowUnknownOption();
});

program
  .version(version)
  .usage('[dir] [option]')
  .option('-f, --framework <name>', 'add frameworks, default to react', /^(react|vue)$/i, 'react')
  .option('-p, --port <n>', 'develop port, default to 8989', /^[1-9]\d*$/i, 8989)
  .parse(process.argv);

if (!exit.exited) {
  main();
}

function before (obj, method, fn) {
  var old = obj[method];
  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  }
}

function exit (code) {
  function done () {
    if (!(draining--)) _exit(code);
  }
  var draining = 0;
  var streams = [process.stdout, process.stderr];
  exit.exited = true;
  streams.forEach(function (stream) {
    draining += 1;
    stream.write('', done);
  });
  done();
}

function main () {
  // Path
  var destinationPath = program.args.shift() || '.';
  // App name
  var appName = path.basename(path.resolve(destinationPath));
  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } 
    else {
     confirm('destination is not empty, continue? [y/N] ', function (ok) {
       if (ok) {
         process.stdin.destroy();
         createApplication(appName, destinationPath);
       }
       else {
         console.error('aborting');
         exit(1);
       }
     });
    }
  });
}

function emptyDirectory (path, fn) {
  fs.readdir(path, function (err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

function confirm (msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|pk|true$/i.test(input));
  });
}

function createApplication (app_name, path) {
  var wait = 3;

  console.log();
  function complete () {
    if (--wait) return;
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
  }
  var config = load_file('templates/config.js');
  var configStr;
  mkdir(path, function () {
    var pkg = {
      name: app_name,
      version: '1.0.0',
      description: '',
      scripts: {
        init: 'gulp init',
        build: 'gulp build',
        dev: 'gulp dev',
        test: 'echo \"Error: no test specified\" && exit 1'
      },
      paths: {
        'dist': './dist',
        'assets': './assets',
        'source': './source'
      },
      devDependencies: {
        'babel-core': '^6.4.5',
        'babel-loader': '^6.2.1',
        'babel-preset-es2015': '^6.3.13',
        'babel-preset-react': '^6.3.13',
        'del': '^2.2.0',
        'extract-text-webpack-plugin': '^1.0.1',
        'gulp': '^3.9.0',
        'gulp-concat': '^2.6.0',
        'gulp-ejs': '^2.0.0',
        'gulp-load-plugins': '^1.2.0',
        'gulp-rename': '^1.2.2',
        'gulp-sourcemaps': '^1.6.0',
        'gulp-uglify': '^1.5.1',
        'gulp-webpack': '^1.5.0',
        'gulp-webserver': '^0.9.1',
        'run-sequence': '^1.1.5',
        'webpack': '^1.12.12'
      },
      license: 'MIT'
    };
    mkdir(path + '/assets', function () {
      copy_file('templates/index.html', path + '/assets/index.html');
      complete();
    });
    switch (program.framework) {
      case 'react':
        mkdir(path + '/source', function () {
          copy_file('templates/react.index.jsx', path + '/source/index.jsx');
          complete();
        });
        pkg['dependencies'] = {
          'react': '0.14.x',
          'react-dom': '0.14.x'
        };
        configStr = {
          modules: '      \'node_modules/react/dist/react.js\',\n' +
                   '      \'node_modules/react-dom/dist/react-dom.js\'',
          entry: '  entry: {\n' +
                 '   \'index\': \'./source/index.jsx\'\n' +
                 '  }',
          externals: '  externals: {\n' +
                     '    \'react\': \'React\',\n' +
                     '    \'react-dom\': \'ReactDOM\'\n' +
                     '  }'
        };
        break;
      default:
        break;
    }
    write(path + '/package.json', JSON.stringify(pkg, null, 2));
    copy_file('webpack.config.js', path + '/webpack.config.js');
    copy_file('index.js', path + '/gulp.config.js');
    write(path + '/config.js', _.template(config)(_.assign({
      appname: _.lowerCase(app_name),
      port: program.port
    }, configStr)));
    copy_file('templates/gulpfile.js', path + '/gulpfile.js');
    complete();
  });
}

function mkdir (path, fn) {
  mkdirp(path, 0755, function (err) {
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

function write (path, str, mode) {
  fs.writeFileSync(path, str, {
    mode: mode || 0666
  });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

function copy_file (from, to) {
  from = path.join(__dirname, '..', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

function load_file (name) {
  return fs.readFileSync(path.join(__dirname, '..', name), 'utf-8');
}
